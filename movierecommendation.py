# -*- coding: utf-8 -*-
"""movierecommendation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g28e1VxHsBvgzxRChpZMR67HshhSLgeo
"""

# importing libraries
import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity

movies_df=pd.read_csv("/movies(genre).csv")

movies_df.head()

ratings_df=pd.read_csv("/ratings.csv")
ratings_df.head()

#checking for null values
display (movies_df.isna().sum())

# Creating a user-movie rating matrix
def create_rating_matrix(ratings_df):
    rating_matrix = ratings_df.pivot(index='userId', columns='movieId', values='rating').fillna(0)
    return rating_matrix

# Calculating movie similarities
def calculate_similarities(rating_matrix):
    # Compute cosine similarity between movies
    similarity_matrix = cosine_similarity(rating_matrix.T)
    similarity_df = pd.DataFrame(
        similarity_matrix,
        index=rating_matrix.columns,
        columns=rating_matrix.columns
    )
    return similarity_df

rating_matrix = create_rating_matrix(ratings_df)
similarity_matrix = calculate_similarities(rating_matrix)

# Get movie recommendations for a user
def get_recommendations(user_id, rating_matrix, similarity_matrix, movies_df, top_n=5):
    if user_id not in rating_matrix.index:
        print(f"User {user_id} not found!")
        return pd.DataFrame(columns=['title'])

    # Get movies the user has rated
    user_ratings = rating_matrix.loc[user_id]
    rated_movies = user_ratings[user_ratings > 0].index

    # Calculate scores for unrated movies
    scores = pd.Series(0.0, index=rating_matrix.columns)
    for movie_id in rated_movies:
        sim_scores = similarity_matrix[movie_id]
        scores += sim_scores * user_ratings[movie_id]

    # Exclude movies the user has already rated
    scores = scores[~scores.index.isin(rated_movies)]

    # Get top N movie IDs
    top_movie_ids = scores.sort_values(ascending=False).head(top_n).index

    # Return movie titles
    recommendations = movies_df[movies_df['movieId'].isin(top_movie_ids)][['title']]
    return recommendations

#  Testing the recommender
user_id = 31  # Replace with a valid userId from ratings.csv
print(f"Recommendations for User {user_id}:")
recommendations = get_recommendations(user_id, rating_matrix, similarity_matrix, movies_df)
print(recommendations)